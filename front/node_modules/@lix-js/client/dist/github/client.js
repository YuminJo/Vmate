import { Octokit } from "octokit";
export function makeGithubClient({ gitHubProxyUrl } = {}) {
    const githubClient = new Octokit({
        request: {
            fetch: (...ghArgs) => {
                ghArgs[0] = gitHubProxyUrl + "/" + ghArgs[0];
                if (!ghArgs[1]) {
                    ghArgs[1] = {};
                }
                if (gitHubProxyUrl) {
                    // required for authenticated cors requests
                    ghArgs[1].credentials = "include";
                }
                // @ts-ignore
                return fetch(...ghArgs);
            },
        },
    });
    const getRepo = async ({ repoName, owner }) => await githubClient
        .request("GET /repos/{owner}/{repo}", {
        owner,
        repo: repoName,
    })
        .catch((newError) => {
        // setErrors((previous: any) => [...(previous || []), newError])
        // not throwing but returning error object allows simpler code and returning partial data from local clone if github not reachable in the future.
        return { error: newError };
    });
    const getAvailableRepos = async (installation_id) => await githubClient
        .request(`GET /user/installations/{installation_id}/repositories`, {
        installation_id,
    })
        .then(({ data }) => data)
        .catch((newError) => {
        return { error: newError };
    });
    const getInstallations = async () => await githubClient
        .request("GET /user/installations")
        .then(({ data }) => data)
        .catch((newError) => {
        return { error: newError };
    });
    const createFork = githubClient.rest.repos.createFork;
    const mergeUpstream = async ({ branch, owner, repoName, }) => await githubClient.request("POST /repos/{owner}/{repo}/merge-upstream", {
        branch,
        owner,
        repo: repoName,
    });
    // const res: Promise<
    // 	| Awaited<
    // 			ReturnType<typeof githubClient.request<"GET /repos/{owner}/{repo}/compare/{base}...{head}">>
    // 	  >
    const compare = async ({ owner, repoName, base, head, }) => {
        return await githubClient.request("GET /repos/{owner}/{repo}/compare/{base}...{head}", {
            owner,
            repo: repoName,
            base,
            head,
        });
    };
    return {
        getInstallations,
        getAvailableRepos,
        getRepo,
        createFork,
        mergeUpstream,
        compare,
    };
}
