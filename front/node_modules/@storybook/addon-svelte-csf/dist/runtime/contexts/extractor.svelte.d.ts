import type { Args } from '@storybook/types';
import { type ComponentProps } from 'svelte';
import type { Cmp, Meta, StoryCmp } from '#types';
export interface StoriesExtractorContextProps<TOverrideArgs extends Args, TCmp extends Cmp, TMeta extends Meta<TCmp>> {
    isExtracting: boolean;
    register: (storyCmpProps: ComponentProps<StoryCmp<TOverrideArgs, TCmp, TMeta>>) => void;
}
declare function buildContext<TOverrideArgs extends Args, TCmp extends Cmp, TMeta extends Meta<TCmp>>(storyCmpProps: StoriesExtractorContextProps<TOverrideArgs, TCmp, TMeta>): {
    readonly isExtracting: boolean;
    readonly register: (storyCmpProps: ComponentProps<StoryCmp<TOverrideArgs, TCmp, TMeta>>) => void;
};
export type StoriesExtractorContext<TOverrideArgs extends Args, TCmp extends Cmp, TMeta extends Meta<TCmp>> = ReturnType<typeof buildContext<TOverrideArgs, TCmp, TMeta>>;
export type StoriesRepository<TOverrideArgs extends Args, TCmp extends Cmp, TMeta extends Meta<TCmp>> = {
    stories: Map<string, ComponentProps<StoryCmp<TOverrideArgs, TCmp, TMeta>>>;
};
export declare function createStoriesExtractorContext<TOverrideArgs extends Args, TCmp extends Cmp, TMeta extends Meta<TCmp>>(repository: StoriesRepository<TOverrideArgs, TCmp, TMeta>): void;
export declare function useStoriesExtractor<TOverrideArgs extends Args, TCmp extends Cmp, TMeta extends Meta<TCmp>>(): {
    readonly isExtracting: boolean;
    readonly register: (storyCmpProps: ComponentProps<StoryCmp<TOverrideArgs, TCmp, TMeta>>) => void;
};
export {};
