import type { Cmp, Meta, StoryAnnotations, StoryContext } from '#types';
import type { Args } from '@storybook/types';
interface ContextProps<TOverrideArgs extends Args, TCmp extends Cmp, TMeta extends Meta<TCmp>> {
    currentStoryExportName: string | undefined;
    args: NonNullable<StoryAnnotations<TCmp, TMeta>['args']>;
    storyContext: StoryContext<TCmp, TMeta>;
}
declare function buildContext<TOverrideArgs extends Args, TCmp extends Cmp, TMeta extends Meta<TCmp>>(props: ContextProps<TOverrideArgs, TCmp, TMeta>): {
    readonly args: any;
    readonly storyContext: StoryContext<TCmp_1, TMeta_1>;
    readonly currentStoryExportName: string | undefined;
    set: (props: ContextProps<TOverrideArgs, TCmp, TMeta>) => void;
};
export type StoryRendererContext<TOverrideArgs extends Args = Args, TCmp extends Cmp = Cmp, TMeta extends Meta<TCmp> = Meta<TCmp>> = ReturnType<typeof buildContext<TOverrideArgs, TCmp, TMeta>>;
export declare function useStoryRenderer<TOverrideArgs extends Args, TCmp extends Cmp, TMeta extends Meta<TCmp>>(): {
    readonly args: any;
    readonly storyContext: StoryContext<TCmp_1, TMeta_1>;
    readonly currentStoryExportName: string | undefined;
    set: (props: ContextProps<TOverrideArgs, TCmp, TMeta>) => void;
};
export {};
