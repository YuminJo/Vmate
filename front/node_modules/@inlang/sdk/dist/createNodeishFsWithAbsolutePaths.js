import { normalizePath } from "@lix-js/fs";
import { isAbsolutePath } from "./validateProjectPath.js";
/**
 * Wraps the nodeish filesystem subset with a function that intercepts paths
 * and prepends the base path.
 *
 * The paths are resolved from the `projectPath` argument.
 */
export const createNodeishFsWithAbsolutePaths = (args) => {
    if (!isAbsolutePath(args.projectPath)) {
        throw new Error(`Expected an absolute path but received "${args.projectPath}".`);
    }
    // get the base path of the settings file by
    // removing the file name from the path
    const basePath = normalizePath(args.projectPath).split("/").slice(0, -1).join("/");
    const makeAbsolute = (path) => {
        if (isAbsolutePath(path)) {
            return normalizePath(path);
        }
        return normalizePath(basePath + "/" + path);
    };
    return {
        // @ts-expect-error
        readFile: (path, options) => args.nodeishFs.readFile(makeAbsolute(path), options),
        readdir: (path) => args.nodeishFs.readdir(makeAbsolute(path)),
        mkdir: (path, options) => args.nodeishFs.mkdir(makeAbsolute(path), options),
        writeFile: (path, data) => args.nodeishFs.writeFile(makeAbsolute(path), data),
        stat: (path) => args.nodeishFs.stat(makeAbsolute(path)),
        rm: (path) => args.nodeishFs.rm(makeAbsolute(path)),
        rmdir: (path) => args.nodeishFs.rmdir(makeAbsolute(path)),
        watch: (path, options) => args.nodeishFs.watch(makeAbsolute(path), options),
        // This might be surprising when symlinks were intended to be relative
        symlink: (target, path) => args.nodeishFs.symlink(makeAbsolute(target), makeAbsolute(path)),
        unlink: (path) => args.nodeishFs.unlink(makeAbsolute(path)),
        readlink: (path) => args.nodeishFs.readlink(makeAbsolute(path)),
        lstat: (path) => args.nodeishFs.lstat(makeAbsolute(path)),
    };
};
