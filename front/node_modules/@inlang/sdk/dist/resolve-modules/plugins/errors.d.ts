import type { Plugin } from "@inlang/plugin";
import type { ValueError } from "@sinclair/typebox/errors";
export declare class PluginHasInvalidIdError extends Error {
    constructor(options: {
        id: Plugin["id"];
    });
}
export declare class PluginHasInvalidSchemaError extends Error {
    constructor(options: {
        id: Plugin["id"];
        errors: ValueError[];
    });
}
export declare class PluginLoadMessagesFunctionAlreadyDefinedError extends Error {
    constructor(options: {
        id: Plugin["id"];
    });
}
export declare class PluginSaveMessagesFunctionAlreadyDefinedError extends Error {
    constructor(options: {
        id: Plugin["id"];
    });
}
export declare class PluginReturnedInvalidCustomApiError extends Error {
    constructor(options: {
        id: Plugin["id"];
        cause: ErrorOptions["cause"];
    });
}
export declare class PluginsDoNotProvideLoadOrSaveMessagesError extends Error {
    constructor();
}
//# sourceMappingURL=errors.d.ts.map