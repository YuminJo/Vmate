import { Message, Variant } from "../versionedInterfaces.js";
const fileExtension = ".json";
export function getMessageIdFromPath(path) {
    if (!path.endsWith(fileExtension)) {
        return;
    }
    const cleanedPath = path.replace(/\/$/, ""); // This regex matches a trailing slash and replaces it with an empty string
    const messageFileName = cleanedPath.split("/").join("_"); // we split by the first leading namespace or _ separator - make sure slashes don't exit in the id
    // const messageFileName = pathParts.at(-1)!
    const lastDotIndex = messageFileName.lastIndexOf(".");
    // Extract until the last dot (excluding the dot)
    return messageFileName.slice(0, Math.max(0, lastDotIndex));
}
export function getPathFromMessageId(id) {
    const path = id.replace("_", "/") + fileExtension;
    return path;
}
/**
 * Returns a copy of a message object with sorted variants and object keys.
 * This produces a deterministic result when passed to stringify
 * independent of the initialization order.
 */
export function normalizeMessage(message) {
    // order keys in message
    const messageWithSortedKeys = {};
    for (const key of Object.keys(message).sort()) {
        messageWithSortedKeys[key] = message[key];
    }
    // order variants
    messageWithSortedKeys["variants"] = messageWithSortedKeys["variants"]
        .sort((variantA, variantB) => {
        // compare by language
        const languageComparison = variantA.languageTag.localeCompare(variantB.languageTag);
        // if languages are the same, compare by match
        if (languageComparison === 0) {
            return variantA.match.join("-").localeCompare(variantB.match.join("-"));
        }
        return languageComparison;
    })
        // order keys in each variant
        .map((variant) => {
        const variantWithSortedKeys = {};
        for (const variantKey of Object.keys(variant).sort()) {
            if (variantKey === "pattern") {
                variantWithSortedKeys[variantKey] = variant["pattern"].map((token) => {
                    const tokenWithSortedKey = {};
                    for (const tokenKey of Object.keys(token).sort()) {
                        tokenWithSortedKey[tokenKey] = token[tokenKey];
                    }
                    return tokenWithSortedKey;
                });
            }
            else {
                variantWithSortedKeys[variantKey] = variant[variantKey];
            }
        }
        return variantWithSortedKeys;
    });
    return messageWithSortedKeys;
}
export function stringifyMessage(message) {
    return JSON.stringify(normalizeMessage(message), undefined, 4);
}
