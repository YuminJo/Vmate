import { LanguageTag, MessageBundle, MessageBundleWithSlots, Message, MessageSlot, Text } from "./types.js";
/**
 * create v2 MessageBundle
 * @example createMessageBundle({
 * 	 id: "greeting",
 *   messages: [
 * 		 createMessage({locale: "en", text: "Hello world!"})
 * 		 createMessage({locale: "de", text: "Hallo Welt!"})
 *   ]
 * })
 */
export declare function createMessageBundle(args: {
    id: string;
    messages: Message[];
    alias?: MessageBundle["alias"];
}): MessageBundle;
/**
 * create v2 Messsage AST with text-only pattern
 * @example createMessage({locale: "en", text: "Hello world"})
 */
export declare function createMessage(args: {
    locale: LanguageTag;
    text: string;
    match?: Array<string>;
}): Message;
export declare function toTextElement(text: string): Text;
/**
 * create MessageSlot for a locale (only used for persistence)
 */
export declare function createMessageSlot(locale: LanguageTag): MessageSlot;
/**
 * return structuredClone with message slots for all locales not yet present
 */
export declare function addSlots(messageBundle: MessageBundle, locales: string[]): MessageBundleWithSlots;
/**
 * remove empty message slots without first creating a structured clone
 */
export declare function removeSlots(messageBundle: MessageBundleWithSlots): MessageBundle;
/**
 * Add newlines between bundles and messages to avoid merge conflicts
 */
export declare function injectJSONNewlines(json: string): string;
//# sourceMappingURL=helper.d.ts.map