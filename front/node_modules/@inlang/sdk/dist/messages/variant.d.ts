import type { LanguageTag, Message, Variant } from "../versionedInterfaces.js";
import type { Result } from "@inlang/result";
import { MessagePatternsForLanguageTagDoNotExistError, MessageVariantAlreadyExistsError, MessageVariantDoesNotExistError } from "./errors.js";
/**
 * Tries to match the most specific variant of a message.
 *
 * The selectors determine the specificity of a variant. If no selectors are provided,
 * or if the selectors do not match any variant, the catch all variant is returned
 * (if it exists).
 *
 * @example
 * 	const variant = getVariant(message, { where: { languageTag: "en", match: ["male"]}});
 */
export declare function getVariant(message: Message, args: {
    where: {
        languageTag: LanguageTag;
        match?: Variant["match"];
    };
}): Variant | undefined;
/**
 * Create a variant for a message
 *
 * All actions are immutable.
 *
 * @example
 *  const message = createVariant(message, { languageTag: "en", data: variant })
 */
export declare function createVariant(message: Message, args: {
    data: Variant;
}): Result<Message, MessageVariantAlreadyExistsError>;
/**
 * Update a variant of a message
 *
 * All actions are immutable.
 *
 * @example
 *  const message = updateVariant(message, { languageTag: "en", match: ["male"], pattern: []})
 */
export declare function updateVariantPattern(message: Message, args: {
    where: {
        languageTag: LanguageTag;
        match: Variant["match"];
    };
    data: Variant["pattern"];
}): Result<Message, MessageVariantDoesNotExistError | MessagePatternsForLanguageTagDoNotExistError>;
//# sourceMappingURL=variant.d.ts.map