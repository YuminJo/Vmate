import { MessagedLintRuleThrowedError } from "./errors.js";
/**
 * Lint a single message.
 *
 * - the lint rule levels defaults to `warning`.
 */
export const lintSingleMessage = async (args) => {
    const reports = [];
    const errors = [];
    const promises = args.rules.map(async (rule) => {
        const level = args.settings.messageLintRuleLevels?.[rule.id];
        if (level === undefined) {
            throw Error("No lint level provided for lint rule: " + rule.id);
        }
        try {
            await rule.run({
                message: args.message,
                settings: args.settings,
                report: (reportArgs) => {
                    reports.push({
                        ruleId: rule.id,
                        level,
                        messageId: reportArgs.messageId,
                        languageTag: reportArgs.languageTag,
                        body: reportArgs.body,
                    });
                },
            });
        }
        catch (error) {
            errors.push(new MessagedLintRuleThrowedError(`Lint rule '${rule.id}' throwed while linting message "${args.message.id}".`, { cause: error }));
        }
    });
    await Promise.all(promises);
    // we sort the reports by rule id to allow us to easyly compare both
    const sortedReports = reports.sort((r1, r2) => r1.ruleId.localeCompare(r2.ruleId));
    return { data: sortedReports, errors };
};
