declare var ReactiveMap: {
    new (initial: any): {
        "__#2@#keyTriggers": {
            "__#1@#map": Map<any, any>;
            dirty(key: any): void;
            track(key: any): void;
        };
        "__#2@#valueTriggers": {
            "__#1@#map": Map<any, any>;
            dirty(key: any): void;
            track(key: any): void;
        };
        has(key: any): boolean;
        get(key: any): any;
        readonly size: number;
        keys(): IterableIterator<any>;
        values(): IterableIterator<any>;
        entries(): IterableIterator<[any, any]>;
        set(key: any, value: any): any;
        delete(key: any): boolean;
        clear(): void;
        forEach(callbackfn: any): void;
        [Symbol.iterator](): IterableIterator<[any, any]>;
        readonly [Symbol.toStringTag]: string;
    };
    groupBy<K, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K): Map<K, T[]>;
    readonly [Symbol.species]: MapConstructor;
};
declare var ReactiveWeakMap: {
    new (initial: any): {
        "__#3@#keyTriggers": {
            "__#1@#map": Map<any, any>;
            dirty(key: any): void;
            track(key: any): void;
        };
        "__#3@#valueTriggers": {
            "__#1@#map": Map<any, any>;
            dirty(key: any): void;
            track(key: any): void;
        };
        has(key: any): boolean;
        get(key: any): any;
        set(key: any, value: any): any;
        delete(key: any): boolean;
        readonly [Symbol.toStringTag]: string;
    };
};
declare function createMap(initial: any): () => [any, any][];
declare function createWeakMap(initial: any): {
    "__#3@#keyTriggers": {
        "__#1@#map": Map<any, any>;
        dirty(key: any): void;
        track(key: any): void;
    };
    "__#3@#valueTriggers": {
        "__#1@#map": Map<any, any>;
        dirty(key: any): void;
        track(key: any): void;
    };
    has(key: any): boolean;
    get(key: any): any;
    set(key: any, value: any): any;
    delete(key: any): boolean;
    readonly [Symbol.toStringTag]: string;
};
export { ReactiveMap, ReactiveWeakMap, createMap, createWeakMap };
//# sourceMappingURL=map.d.ts.map