/**
 * State machine to convert async save() into batched async save()
 * states = idle -> acquiring -> saving -> idle
 * idle = nothing queued, ready to acquire lock.
 * aquiring = waiting to acquire a lock: requests go into the queue.
 * saving = lock is acquired, save has begun: new requests go into the next batch.
 * The next batch should not acquire the lock while current save is in progress.
 * Queued requests are only resolved when the save completes.
 */
export declare function batchedIO(acquireLock: () => Promise<number>, releaseLock: (lock: number) => Promise<void>, save: () => Promise<void>): (id: string) => Promise<string>;
//# sourceMappingURL=batchedIO.d.ts.map