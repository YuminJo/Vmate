export class LoadProjectInvalidArgument extends Error {
    constructor(message, options) {
        super(`The argument "${options.argument}" of loadProject() is invalid: ${message}`);
        this.name = "LoadProjectInvalidArgument";
    }
}
export class ProjectSettingsInvalidError extends Error {
    constructor(options) {
        // TODO: beatufiy ValueErrors
        super(`The project settings are invalid:
${options.errors
            .filter((error) => error.path)
            .map(FormatProjectSettingsError)
            .join("\n")}`);
        this.name = "ProjectSettingsInvalidError";
    }
}
function FormatProjectSettingsError(error) {
    let msg = `${error.message} at ${error.path}`;
    if (error.path.startsWith("/modules/")) {
        msg += `
value = "${error.value}"
- ${error.schema.allOf.map((o) => `${o.description ?? ""}`).join("\n- ")}`;
    }
    return msg;
}
export class ProjectSettingsFileJSONSyntaxError extends Error {
    constructor(options) {
        super(`The settings file at "${options.path}" is not a valid JSON file:\n\n${options.cause}`, options);
        this.name = "ProjectSettingsFileJSONSyntaxError";
    }
}
export class ProjectSettingsFileNotFoundError extends Error {
    constructor(options) {
        super(`The file at "${options.path}" could not be read. Does the file exists?`, options);
        this.name = "ProjectSettingsFileNotFoundError";
    }
}
export class PluginSaveMessagesError extends Error {
    constructor(options) {
        super(`An error occured in saveMessages() caused by ${options.cause}.`, options);
        this.name = "PluginSaveMessagesError";
    }
}
export class PluginLoadMessagesError extends Error {
    constructor(options) {
        super(`An error occured in loadMessages() caused by ${options.cause}.`, options);
        this.name = "PluginLoadMessagesError";
    }
}
export class LoadMessageError extends Error {
    constructor(options) {
        super(`An error occured when loading message ${options.messageId} from path ${options.path} caused by ${options.cause}.`, options);
        this.name = "LoadMessageError";
    }
}
export class SaveMessageError extends Error {
    constructor(options) {
        super(`An error occured when loading message ${options.messageId} from path ${options.path} caused by ${options.cause}.`, options);
        this.name = "SaveMessageError";
    }
}
