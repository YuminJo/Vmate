import type { ValueError } from "@sinclair/typebox/errors";
export declare class LoadProjectInvalidArgument extends Error {
    constructor(message: string, options: {
        argument: string;
    });
}
export declare class ProjectSettingsInvalidError extends Error {
    constructor(options: {
        errors: ValueError[];
    });
}
export declare class ProjectSettingsFileJSONSyntaxError extends Error {
    constructor(options: {
        cause: ErrorOptions["cause"];
        path: string;
    });
}
export declare class ProjectSettingsFileNotFoundError extends Error {
    constructor(options: {
        cause?: ErrorOptions["cause"];
        path: string;
    });
}
export declare class PluginSaveMessagesError extends Error {
    constructor(options: {
        cause: ErrorOptions["cause"];
    });
}
export declare class PluginLoadMessagesError extends Error {
    constructor(options: {
        cause: ErrorOptions["cause"];
    });
}
export declare class LoadMessageError extends Error {
    constructor(options: {
        path: string;
        messageId: string;
        cause: ErrorOptions["cause"];
    });
}
export declare class SaveMessageError extends Error {
    constructor(options: {
        path: string;
        messageId: string;
        cause: ErrorOptions["cause"];
    });
}
//# sourceMappingURL=errors.d.ts.map