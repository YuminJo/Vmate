import { findFile } from "../utils.js";
import path from "node:path";
const BOILERPLATE_FILE = `<!-- File autogenerated by the Paraglide-SvelteKit CLI - Feel free to edit -->
<script>
    import { ParaglideJS } from "@inlang/paraglide-sveltekit"
    import { i18n } from "${"$"}lib/i18n"
</script>

<ParaglideJS {i18n}>
    <slot />
</ParaglideJS>`;
export const addParaglideJSComponent = async (ctx) => {
    const layoutFilePath = await findFile({
        base: process.cwd(),
        candidates: ["./src/routes/+layout.svelte"],
        fs: ctx.repo.nodeishFs,
    });
    if (!layoutFilePath) {
        // create it
        const layoutFilePath = path.resolve(process.cwd(), "./src/routes/+layout.svelte");
        await ctx.repo.nodeishFs.writeFile(layoutFilePath, BOILERPLATE_FILE);
        ctx.logger.success("Added layout file with Language Provider at src/routes/+layout.svelte");
        return ctx;
    }
    else {
        // update it
        const content = await ctx.repo.nodeishFs.readFile(layoutFilePath, { encoding: "utf-8" });
        const updatedContent = updateLayoutFile(content);
        await ctx.repo.nodeishFs.writeFile(layoutFilePath, updatedContent);
        ctx.logger.success("Added Language Provider to src/routes/+layout.svelte");
        return ctx;
    }
};
// assumption: The <script> element is at the top (if present) and the <style> at the bottom (if present)
export function updateLayoutFile(code) {
    // add the imports
    code = addImportsToScript(code, `\timport { ParaglideJS } from '@inlang/paraglide-sveltekit'\n\timport { i18n } from '${"$"}lib/i18n'`);
    code = addParaglideJSComponentToContent(code);
    return code;
}
// updates the script tag if present - Adds it if not
function addImportsToScript(code, imports) {
    const scriptStart = code.indexOf("<script");
    //first ">" after scriptStart
    const scriptEntry = code.indexOf(">", scriptStart);
    // if both are found -> there is a script
    if (scriptStart !== -1 && scriptEntry !== -1) {
        // insert import statements at the top of the script
        code = insert(code, "\n" + imports + "\n", scriptEntry + 1);
    }
    else {
        // prepend a script with the imports
        code = "<script>\n" + imports + "\n</script>\n" + code;
    }
    return code;
}
function addParaglideJSComponentToContent(code) {
    // find the start & the end of the content portion of the code
    const scriptEnd = code.indexOf("</script>");
    const styleStart = code.indexOf("<style");
    const contentStart = scriptEnd === -1 ? 0 : scriptEnd + "</script>".length;
    const contentEnd = styleStart === -1 ? code.length : styleStart;
    let content = code.slice(contentStart, contentEnd);
    const hasSlot = content.includes("<slot");
    content =
        `\n<ParaglideJS {i18n}>\n` +
            content +
            (hasSlot ? "\n</ParaglideJS>" : "\n<slot/>\n</ParaglideJS>");
    code = code.slice(0, contentStart) + content + code.slice(contentEnd);
    return code;
}
function insert(original, toInsert, index) {
    return original.slice(0, index) + toInsert + original.slice(index);
}
