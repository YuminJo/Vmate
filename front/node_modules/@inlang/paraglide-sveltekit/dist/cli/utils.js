import path from "node:path";
export function pair(step1, step2) {
    return async (ctx) => await step2(await step1(ctx));
}
export async function succeedOrElse(promise, orElse) {
    try {
        return await promise;
    }
    catch (err) {
        return orElse;
    }
}
const WINDOWS_SLASH_REGEX = /\\/g;
function slash(p) {
    return p.replace(WINDOWS_SLASH_REGEX, "/");
}
const isWindows = typeof process !== "undefined" && process.platform === "win32";
export function normalizePath(id) {
    return path.posix.normalize(isWindows ? slash(id) : id);
}
export async function findFile(args) {
    const promises = args.candidates
        .map((c) => path.resolve(args.base, c))
        .map(async (candidate) => ({
        exists: await fileExists(args.fs, candidate),
        path: candidate,
    }));
    const results = await Promise.all(promises);
    return results.find((result) => result.exists)?.path;
}
export async function fileExists(fs, path) {
    try {
        const stat = await fs.stat(path);
        return stat.isFile();
    }
    catch {
        return false;
    }
}
