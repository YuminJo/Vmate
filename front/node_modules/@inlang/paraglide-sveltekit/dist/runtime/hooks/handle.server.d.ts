import type { Handle } from "@sveltejs/kit";
import type { I18nConfig } from "../adapter.server.js";
import type { RoutingStrategy } from "../strategy.js";
export type HandleOptions = {
    /**
     * Which placeholder to find and replace with the language tag.
     * Use this placeholder as the lang atrribute in your `src/app.html` file.
     *
     *
     * @default "%paraglide.lang%"
     *
     * @example
     * ```html
     * <!-- src/app.html -->
     * <html lang="%paraglide.lang%">
     * ```
     * ```ts
     * { langPlaceholder: "%paraglide.lang%" }
     * ```
     *
     */
    langPlaceholder?: string;
    /**
     * Which placeholder to find and replace with the text-direction of the current language.
     *
     * @default "%paraglide.textDirection%"
     *
     * @example
     * ```html
     * <!-- src/app.html -->
     * <html dir="%paraglide.textDirection%">
     * ```
     * ```ts
     * { textDirectionPlaceholder: "%paraglide.textDirection%" }
     * ```
     */
    textDirectionPlaceholder?: string;
    /**
     * If `AsyncLocalStorage` should be used to scope the language state to the current request.
     * This makes it impossible for requests to override each other's language.
     *
     * ONLY DISABLE THIS IF YOU ARE CERTAIN YOUR ENVIRONMENT DOES
     * NOT ALLOW CONCURRENT REQUESTS.
     *
     * For example in Vercel Edge functions
     *
     * @default false
     */
    disableAsyncLocalStorage?: boolean;
};
export declare const createHandle: <T extends string>(strategy: RoutingStrategy<T>, i18n: I18nConfig<T>, options: HandleOptions) => Handle;
//# sourceMappingURL=handle.server.d.ts.map