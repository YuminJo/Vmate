export type ALS<T> = import("node:async_hooks").AsyncLocalStorage<T>;
export type ALSPrototype = typeof import("node:async_hooks").AsyncLocalStorage;
export interface Context<T> {
    get(): T | undefined;
    callAsync: <CB extends () => any>(val: T, cb: CB) => Promise<Awaited<ReturnType<CB>>>;
}
export declare class ALSContext<T> implements Context<T> {
    ctx: ALS<T>;
    constructor(ALS: ALSPrototype);
    get(): T | undefined;
    callAsync(val: T, cb: () => any): Promise<any>;
}
export declare class GlobalContext<T> implements Context<T> {
    value: T | undefined;
    get(): T | undefined;
    callAsync(val: T, cb: () => any): Promise<any>;
}
//# sourceMappingURL=utils.d.ts.map