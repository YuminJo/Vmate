import { i as index, c as collect, G as GitPackIndex, a as GitTree, b as GitCommit } from "./cli/index.js";
import "commander";
import "./index.js";
import "dedent";
import "tty";
import "util";
import "os";
import "posthog-node";
import "node:fs/promises";
import "node:path";
import "node:crypto";
import "consola/utils";
import "consola";
import "buffer";
import "node:child_process";
import "json5";
import "@inlang/detect-json-formatting";
if (window) {
  window.isoGit = index;
}
async function inflatePackResponse(packResonseBody) {
  const bodyResponse = await index._parseUploadPackResponse([packResonseBody]);
  const packfile = Buffer.from(await collect(bodyResponse.packfile));
  const packfileSha = packfile.slice(-20).toString("hex");
  if (!packfileSha) {
    return "";
  }
  return {
    acks: bodyResponse.acks,
    nak: bodyResponse.nak,
    shallows: bodyResponse.shallows,
    unshallows: bodyResponse.unshallows,
    packfilePath: `objects/pack/pack-${packfileSha}.pack`,
    ...await inflatePackfile(packfile)
  };
}
async function inflatePackfile(packfile) {
  const getExternalRefDelta = (oid) => console.warn("trying to catch external ref", oid);
  const idx = await GitPackIndex.fromPack({
    pack: packfile,
    getExternalRefDelta,
    onProgress: void 0
  });
  const inflatedPack = {};
  const trees = {};
  for (const hash of idx.hashes) {
    const object = await idx.read({ oid: hash });
    const typeKey = object.type + "s";
    if (!inflatedPack[typeKey]) {
      inflatedPack[typeKey] = {};
    }
    if (object.type === "tree") {
      trees[hash] = new GitTree(object.object);
    } else if (object.type === "commit") {
      const commit = new GitCommit(object.object);
      inflatedPack[typeKey][hash] = commit.parse();
    } else if (object.type === "blob") {
      object.string = object.object.toString();
      inflatedPack[typeKey][hash] = object;
    } else {
      inflatedPack[typeKey][hash] = object;
    }
  }
  Object.values(inflatedPack.commits || {}).forEach((commit) => {
    inflatedPack.trees[commit.tree] = extractTree(trees, commit.tree);
  });
  inflatedPack.trees = { ...inflatedPack.trees, ...trees };
  return inflatedPack;
}
function extractTree(treeEntries, treeHash) {
  const tree = treeEntries[treeHash];
  if (!tree) {
    return {};
  }
  const extractedTree = {};
  tree._entries.forEach((entry) => {
    if (entry.type === "tree") {
      extractedTree[entry.path] = {
        children: extractTree(treeEntries, entry.oid),
        ...entry
      };
    } else {
      extractedTree[entry.path] = entry;
    }
  });
  delete treeEntries[treeHash];
  return extractedTree;
}
export {
  inflatePackResponse,
  inflatePackfile
};
