import { type Static } from "@sinclair/typebox";
/**
 * The result of a message reference matcher.
 *
 * The result contains the message id and the position
 * from where to where the reference can be found.
 */
export declare const MessageReferenceMatch: import("@sinclair/typebox").TObject<{
    /**
     * The messages id.
     */
    messageId: import("@sinclair/typebox").TString;
    /**
     * The position from where to where the reference can be found.
     */
    position: import("@sinclair/typebox").TObject<{
        start: import("@sinclair/typebox").TObject<{
            line: import("@sinclair/typebox").TNumber;
            character: import("@sinclair/typebox").TNumber;
        }>;
        end: import("@sinclair/typebox").TObject<{
            line: import("@sinclair/typebox").TNumber;
            character: import("@sinclair/typebox").TNumber;
        }>;
    }>;
}>;
/**
 * The config schema for the ide extension.
 */
export declare const IdeExtensionConfigSchema: import("@sinclair/typebox").TObject<{
    /**
     * Defines matchers for message references inside the code.
     *
     * @param args represents the data to conduct the search on
     * @returns a promise with matched message references
     */
    messageReferenceMatchers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TFunction<[import("@sinclair/typebox").TObject<{
        documentText: import("@sinclair/typebox").TString;
    }>], import("@sinclair/typebox").TPromise<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        /**
         * The messages id.
         */
        messageId: import("@sinclair/typebox").TString;
        /**
         * The position from where to where the reference can be found.
         */
        position: import("@sinclair/typebox").TObject<{
            start: import("@sinclair/typebox").TObject<{
                line: import("@sinclair/typebox").TNumber;
                character: import("@sinclair/typebox").TNumber;
            }>;
            end: import("@sinclair/typebox").TObject<{
                line: import("@sinclair/typebox").TNumber;
                character: import("@sinclair/typebox").TNumber;
            }>;
        }>;
    }>>>>>;
    /**
     * Defines the options to extract messages.
     */
    extractMessageOptions: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        /**
         * Function which is called, when the user finished the message extraction command.
         *
         * @param messageId is the message identifier entered by the user
         * @param selection is the text which was extracted
         * @returns the code which is inserted into the document
         */
        callback: import("@sinclair/typebox").TFunction<[import("@sinclair/typebox").TObject<{
            messageId: import("@sinclair/typebox").TString;
            selection: import("@sinclair/typebox").TString;
        }>], import("@sinclair/typebox").TObject<{
            messageId: import("@sinclair/typebox").TString;
            messageReplacement: import("@sinclair/typebox").TString;
        }>>;
    }>>;
    /**
     * An array of Visual Studio Code DocumentSelectors.
     *
     * The document selectors specify for which files/programming languages
     * (typescript, svelte, etc.) the extension should be activated.
     *
     * See https://code.visualstudio.com/api/references/document-selector
     */
    documentSelectors: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        language: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>>>;
}>;
export type CustomApiInlangIdeExtension = Static<typeof IdeExtensionConfigSchema>;
//# sourceMappingURL=app.inlang.ideExtension.d.ts.map