import { expectType } from "tsd";
import { tryCatch } from "./tryCatch.js";
import { it, describe, expect } from "vitest";
function syncPassing() {
    return "hello";
}
function syncFailing() {
    throw new Error("fail");
}
function asyncFailing() {
    return Promise.reject(new Error("fail"));
}
function asyncPassing() {
    return Promise.resolve("hello");
}
expectType(tryCatch(() => syncPassing()));
expectType(await tryCatch(() => asyncPassing()));
const result = tryCatch(() => syncPassing());
if (result.error) {
    expectType(result.data);
    expectType(result.error);
}
else {
    expectType(result.data);
    expectType(result.error);
}
describe("sync", () => {
    it("should return an error if the callback throws", () => {
        const result = tryCatch(() => syncFailing());
        expect(result).toEqual({ error: new Error("fail") });
    });
    it("should return the data if the callback returns", () => {
        const result = tryCatch(() => syncPassing());
        expect(result).toEqual({ data: "hello" });
    });
});
describe("async", () => {
    it("should return an error if the callback rejects", async () => {
        const result = await tryCatch(() => asyncFailing());
        expect(result).toEqual({ error: new Error("fail") });
    });
    it("should return the data if the callback resolves", async () => {
        const result = await tryCatch(() => asyncPassing());
        expect(result).toEqual({ data: "hello" });
    });
});
